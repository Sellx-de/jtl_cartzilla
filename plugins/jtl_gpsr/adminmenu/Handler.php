<?php

declare(strict_types=1);

namespace Plugin\jtl_gpsr\adminmenu;

use Exception;
use JTL\Filesystem\Filesystem;
use JTL\Plugin\PluginInterface;
use JTL\Shop;
use JTL\Smarty\JTLSmarty;
use League\Flysystem\FilesystemException;
use Plugin\jtl_gpsr\LegacyHelper;
use SmartyException;

/**
 * Class Handler
 * @package Plugin\jtl_gpsr\adminmenu
 */
class Handler
{
    private PluginInterface $plugin;
    private const PLUGIN_ID           = 'jtl_gpsr';
    private const SMARTY_FILE_COMMENT = '{* This is file was automatically generated by the JTL GPSR plugin.'
    . ' Please, dont edit this file! *}';

    /**
     * Handler constructor
     * @param PluginInterface $plugin
     */
    public function __construct(PluginInterface $plugin)
    {
        $this->plugin = $plugin;
    }

    /**
     * @param string $tabName
     * @param int    $default
     * @return int
     */
    private function getMenuId(string $tabName, int $default): int
    {
        foreach ($this->plugin->getAdminMenu()->getItems() as $item) {
            if ($item->name === $tabName) {
                return $item->id;
            }
        }

        return $default;
    }

    private function renderDefaults(int $menuID, JTLSmarty $smarty): void
    {
        $route = $smarty->getTemplateVars('route');
        if (empty($route)) {
            $route = '/plugin.php?kPlugin=' . $this->plugin->getID();
        }

        $smarty->assign('kPlugin', $this->plugin->getID())
               ->assign('kPluginAdminMenu', $menuID)
               ->assign('route', $route)
               ->assign('detailConstant', GPSRTemplatefile::DETAIL)
               ->assign('listConstant', GPSRTemplatefile::LIST);
    }

    /**
     * @param int       $menuID
     * @param JTLSmarty $smarty
     * @return string
     * @throws SmartyException
     */
    public function renderAdminMenuInfo(int $menuID, JTLSmarty $smarty): string
    {
        $this->renderDefaults($menuID, $smarty);

        return $smarty->assign('settingTabId', $this->getMenuId('Settings', $menuID))
                      ->assign('infoTabId', $this->getMenuId('Info', $menuID))
                      ->fetch($this->plugin->getPaths()->getAdminPath() . 'template/info.tpl');
    }

    /**
     * @param int       $menuID
     * @param JTLSmarty $smarty
     * @return string
     * @throws SmartyException
     */
    public function renderAdminMenuPresentation(int $menuID, JTLSmarty $smarty): string
    {
        $presentationTabId = $this->getMenuId('Darstellung', $menuID);
        $config            = new Config($this->plugin, Shop::Container()->getDB());
        $gpsrPresentation  = [
            'manufacturer'      => $config->getValue('gpsr_template_manufacturer'),
            'responsibleperson' => $config->getValue('gpsr_template_responsibleperson'),
        ];

        foreach ($gpsrPresentation as $key => $presentation) {
            if (empty($presentation)) {
                $gpsrPresentation[$key] = \file_get_contents(
                    $this->plugin->getPaths()->getAdminPath() . 'template/gpsr_template_' . $key . '.tpl'
                );
            }
        }

        $this->renderDefaults($menuID, $smarty);

        return $smarty->assign('gpsr_presentation', $gpsrPresentation)
                      ->assign('presentationTabId', $presentationTabId)
                      ->fetch($this->plugin->getPaths()->getAdminPath() . 'template/presentation.tpl');
    }

    /**
     * @param array{plugin: PluginInterface} $args
     */
    public function generateTemplateFiles(array $args): void
    {
        $plugin = $args['plugin'];
        if ($plugin->getPluginID() !== self::PLUGIN_ID) {
            return;
        }
        $config    = new Config($plugin, Shop::Container()->getDB());
        $templates = [];
        if ($config->getStringValue('gpsr_productdetails_show') === 'on') {
            $templates['productdetails'] = (object)[
                'file'   => $config->getStringValue('gpsr_templatefile_productdetails'),
                'block'  => $config->getStringValue('gpsr_templateblock_productdetails'),
                'method' => $config->getStringValue('gpsr_templateposition_productdetails'),
            ];
        }
        if ($config->getStringValue('gpsr_productlist_show') === 'on') {
            $templates['productlist'] = (object)[
                'file'   => $config->getStringValue('gpsr_templatefile_productlist'),
                'block'  => $config->getStringValue('gpsr_templateblock_productlist'),
                'method' => $config->getStringValue('gpsr_templateposition_productlist'),
            ];
        }

        $frontendPath = \PLUGIN_DIR . self::PLUGIN_ID . '/frontend';
        $templatePath = $frontendPath . '/template';
        try {
            /** @var Filesystem $fileSystem */
            $fileSystem = Shop::Container()->get(Filesystem::class);
            LegacyHelper::deleteDirectory($fileSystem, $templatePath);
            LegacyHelper::createDirectory($fileSystem, $templatePath);
        } catch (FilesystemException | Exception $e) {
            try {
                Shop::Container()->getLogService()->error(
                    \sprintf(
                        'Cant create directory "%s". %s',
                        $templatePath,
                        $e->getMessage(),
                    ),
                    [__CLASS__],
                );
            } catch (Exception $e) {
            }

            return;
        }

        foreach ($templates as $template) {
            if (
                $template->file === ''
                || $template->block === ''
                || $template->method === ''
            ) {
                continue;
            }
            $this->createTemplateFile($fileSystem, $frontendPath, $template);
        }
    }

    /**
     * @param object{file: string, block: string, method: string} $template
     */
    private function createTemplateFile(
        Filesystem $fileSystem,
        string $frontendPath,
        object $template
    ): void {
        $templatePath     = $frontendPath . '/template/';
        $templateFileDir  = $templatePath
            . \str_replace('/' . \basename($template->file), '', $template->file);
        $templateFilePath = $templatePath . $template->file;
        $extensionMethod  = $template->method === 'append' ? ' append' : ' prepend';
        try {
            if (LegacyHelper::directoryExists($fileSystem, $templateFileDir) === false) {
                LegacyHelper::createDirectory($fileSystem, $templateFileDir);
            }
            $gpsrContent = $fileSystem->read($frontendPath . '/gpsr/gpsrInfo.tpl');
            $fileSystem->write(
                $templateFilePath,
                self::SMARTY_FILE_COMMENT . "\r\n"
                . '{block name="' . $template->block . '"' . $extensionMethod . "}\r\n"
                . $gpsrContent
                . '{/block}'
            );
        } catch (FilesystemException $e) {
            try {
                Shop::Container()->getLogService()->error(
                    \sprintf(
                        'Cant write template file "%s". %s',
                        $templateFilePath,
                        $e->getMessage(),
                    ),
                    [__CLASS__],
                );
            } catch (Exception $e) {
            }
        }
    }

    public function getTemplateBlocksAsJson(string $templateFileType, string $templateFilePath): string
    {
        if (
            $templateFileType !== GPSRTemplatefile::DETAIL
            && $templateFileType !== GPSRTemplatefile::LIST
        ) {
            try {
                Shop::Container()->getLogService()->error(
                    \sprintf(
                        'TemplateFileType "%s" doesn\'t match allowd type.',
                        $templateFileType,
                    ),
                    [__CLASS__],
                );
            } catch (Exception $e) {
            }

            return '';
        }

        $config = $this->plugin->getConfig();
        $option = $config->getOptions()->firstWhere(
            'valueID',
            '===',
            'gpsr_templatefile_' . $templateFileType
        );
        if (
            \is_object($option) === false
            || isset($option->value) === false
        ) {
            return '';
        }
        $option->value = $templateFilePath;
        $result        = '';
        try {
            $result = \json_encode(
                GPSRTemplateblock::getInstance($templateFileType, $config)->getList(true),
                \JSON_THROW_ON_ERROR
            );
        } catch (\JsonException $e) {
            try {
                Shop::Container()->getLogService()->error(
                    $e->getMessage(),
                    [__CLASS__],
                );
            } catch (Exception $e) {
            }
        }

        return $result;
    }
}
